version: "3.5"
services:
  database:
    image: postgres:latest
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ostock_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  configserver:
    image: ostock/configserver:0.0.1-SNAPSHOT
    ports:
      - "8071:8071"
    environment:
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    networks:
      - backend
  eurekaserver:
    image: ostock/eurekaserver:0.0.1-SNAPSHOT
    ports:
      - "8070:8070"
    environment:
      SPRING_CLOUD_CONFIG_URI: http://configserver:8071
#      EUREKA_INSTANCE_HOSTNAME: eurekaserver
#      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
#      EUREKA_CLIENT_FETCH_REGISTRY: "false"
    networks:
      - backend
    depends_on:
      - configserver
  gatewayserver:
    image: ostock/gatewayserver:0.0.1-SNAPSHOT
    ports:
      - "8072:8072"
    environment:
      SPRING_CLOUD_CONFIG_URI: http://configserver:8071
#      PROFILE: "default"
#      SERVER_PORT: "8072"
#      CONFIGSERVER_PORT: "8071"
#      CONFIGSERVER_URI: "http://configserver:8071"
#      EUREKASERVER_URI: "http://eurekaserver:8070/eureka"
#      EUREKASERVER_PORT: "8070"
    networks:
      backend:
        aliases:
          - "gateway"
  keycloak:
    image: jboss/keycloak
#    restart: always
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      JAVA_OPTS_APPEND: -Dkeycloak.profile.feature.upload_scripts=enabled
      KEYCLOAK_IMPORT: /tmp/spmia-realm.json
    ports:
      - "8080:8080"
    volumes:
      - ./data/keycloak:/tmp
    networks:
      backend:
        aliases:
          - "keycloak"
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    networks:
      backend:
        aliases:
          - "zookeeper"
  kafkaserver:
    image: wurstmeister/kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"
  redisserver:
    image: redis:alpine
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
#    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - "9300:9300"
      - "9200:9200"
    networks:
      backend:
        aliases:
          - "elasticsearch"
  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
#    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - "5601:5601"
    networks:
      backend:
        aliases:
          - "kibana"
  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.0
#    container_name: logstash
    command:
      logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5000:5000"
    networks:
      backend:
        aliases:
          - "logstash"
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    depends_on:
      - "elasticsearch"
    environment:
      STORAGE_TYPE: elasticsearch
      ES_HOSTS: "elasticsearch:9300"
    networks:
      backend:
        aliases:
          - "zipkin"
  licensing-service:
    image: ostock/licensing-service:0.0.1-SNAPSHOT
    ports:
      - "8180:8080"
    environment:
      SPRING_APPLICATION_NAME: licensing-service
      SPRING_PROFILES_ACTIVE: dev,aws-dev
      SPRING_CLOUD_CONFIG_URI: http://configserver:8071
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/ostock_dev
      SPRING_DATASOURCE_USER: postgres
      SPRING_DATASOURCE_PASSWORD: '{cipher}0927d4500872b0de2261621c34b0f16e56a3dc145733528ba895be0971949263'
      ENCRYPT_KEY: "IMSYMMETRIC"
    networks:
      - backend
    depends_on:
      - configserver
      - database
  organization-service:
    image: ostock/organization-service:0.0.1-SNAPSHOT
    ports:
      - "8081:8081"
    environment:
      SPRING_APPLICATION_NAME: organization-service
      SPRING_PROFILES_ACTIVE: dev,aws-dev
      SPRING_CLOUD_CONFIG_URI: http://configserver:8071
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/ostock_dev
      SPRING_DATASOURCE_USER: postgres
      SPRING_DATASOURCE_PASSWORD: '{cipher}0927d4500872b0de2261621c34b0f16e56a3dc145733528ba895be0971949263'
      ENCRYPT_KEY: "IMSYMMETRIC"
    networks:
      - backend
    depends_on:
      - configserver
      - database
networks:
  backend:
    driver: bridge
volumes:
  esdata1:
    driver: local
